<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

global $IN_MINIKERNEL_VERSION;
$IN_MINIKERNEL_VERSION = true;

// Find Composr base directory, and chdir into it
global $FILE_BASE;
$FILE_BASE = (strpos(__FILE__, './') === false) ? __FILE__ : realpath(__FILE__);
if (substr($FILE_BASE, -4) == '.php') {
    $a = strrpos($FILE_BASE, '/');
    $b = strrpos($FILE_BASE, '\\');
    $FILE_BASE = dirname($FILE_BASE);
}
@chdir($FILE_BASE);

error_reporting(E_ALL);

safe_ini_set('display_errors', '1');
assert_options(ASSERT_ACTIVE, 0);
safe_ini_set('assert.active', '0');

global $REQUIRED_BEFORE;
$REQUIRED_BEFORE = array();

global $SITE_INFO;
$SITE_INFO = array();

global $CURRENT_SHARE_USER;
$CURRENT_SHARE_USER = null;

$GLOBALS['DEV_MODE'] = false;
$GLOBALS['SEMI_DEV_MODE'] = true;

if (!defined('ENT_SUBSTITUTE')) { // LEGACY
    define('ENT_SUBSTITUTE', 0);
}

@ob_end_clean(); // Reset to have no output buffering by default (we'll use it internally, taking complete control)

// Are we in a special version of PHP?
define('HHVM', strpos(PHP_VERSION, 'hiphop') !== false);
define('GOOGLE_APPENGINE', isset($_SERVER['APPLICATION_ID']));

define('URL_CONTENT_REGEXP', '\w\-\x80-\xFF'); // PHP is done using ASCII (don't use the 'u' modifier). Note this doesn't include dots, this is intentional as they can cause problems in filenames
define('URL_CONTENT_REGEXP_JS', '\w\-\u0080-\uFFFF'); // JavaScript is done using Unicode

$shl = @ini_get('suhosin.memory_limit');
if (($shl === false) || ($shl == '') || ($shl == '0')) {
    safe_ini_set('memory_limit', '-1');
} else {
    safe_ini_set('memory_limit', $shl);
}

// Requirements check
$phpv = PHP_VERSION;
if ((substr($phpv, 0, 2) == '3.') || (substr($phpv, 0, 2) == '4.') || (substr($phpv, 0, 4) == '5.0.')) {
    exit(do_lang('PHP_OLD'));
}

// Tunnel into some Composr code we can use
include('_config.php');
require_code('critical_errors');
require_code('permissions');
require_code('minikernel');
require_code('global3');
require_code('temporal');
require_code('files');
require_code('lang');
require_code('tempcode');
require_code('templates');
require_code('zones');
require_code('version');
require_code('comcode');
require_code('database');
require_code('database_action');

// No restoration (needed) on XML DB driver
if (get_db_type() == 'xml') {
    warn_exit('Cannot run on XML database driver');
}

// If we are referencing this file in order to extract dependant url's from a pack
handle_self_referencing_embedment();

// Set up some globals
global $INSTALL_LANG, $VERSION, $CHMOD_ARRAY;
$INSTALL_LANG = (isset($_GET['default_lang'])) ? $_GET['default_lang'] : 'en';

// Language files we can use
require_lang('global');
require_lang('critical_error');
require_lang('installer');
require_lang('version');
require_lang('backups');

// Start button if not post
if (cms_srv('REQUEST_METHOD') != 'POST') {
    $msg = '';
    $msg .= '<form action="restore.php" method="post"><input id="proceed_button" class="button_screen buttons__proceed" type="submit" value="' . escape_html(do_lang('START')) . '" onclick="this.disabled=true; this.form.submit();" /></form>';
    finish_restorer_output($msg);
}

// Now we actually read into the data file and execute the commented out reinstallation code.
// This is necessary for re-entrant code, and because we can't load it all through the PHP parser at once!

$time_start = time();
$time_max = $time_start + get_param_integer('time_limit', 10);

// Open file
$data_file = fopen(dirname(__FILE__) . '/restore_data.php', 'rb');

// Skip forward for offset in this iteration
$offset = get_param_integer('start_offset', 0);
if ($offset != 0) {
    fseek($data_file, $offset);
    $found_start = true;
} else {
    $found_start = false;
}

// Run SQL commands
$sql_buildup = '';
while (($line = fgets($data_file)) !== false) {
    if (!$found_start) {
        // Not got to the data start yet
        if (trim($line) == '//COMMANDS BEGIN...') {
            $found_start = true;
        }
        continue;
    }

    if (substr($line, 0, 2) != '//') {
        // Done
        break;
    }

    // Strip comment
    $line = substr($line, 2);

    // Find if it is a new command
    $is_new_command = false;
    $valid_cmd_starts = array(
        '$GLOBALS[\'SITE_DB\']->query_insert(\'',
        '$GLOBALS[\'SITE_DB\']->drop_table_if_exists(\'',
        '$GLOBALS[\'SITE_DB\']->create_table(\'',
        '$GLOBALS[\'SITE_DB\']->delete_index_if_exists(\'',
        '$GLOBALS[\'SITE_DB\']->create_index(\'',
    );
    foreach ($valid_cmd_starts as $valid_cmd_start) {
        if (substr(ltrim($line), 0, strlen($valid_cmd_start)) == $valid_cmd_start) {
            $is_new_command = true;
            break;
        }
    }

    if (($is_new_command) && ($sql_buildup != '')) {
        // Run command
        $success = @eval($sql_buildup); // NB: Query errors are echo'd out as DB API knows restoration script is running
        if ($success === false) {
            header('Content-type: text/plain');
            exit('Failed on: ' . $sql_buildup);
        }
        $sql_buildup = '';

        // Need to go to a new iteration?
        if (time() >= $time_max) {
            $refresh_url = 'restore.php?start_offset=' . strval($offset);

            $msg = '';
            $msg .= '<form action="' . escape_html($refresh_url) . '" method="post"><input id="proceed_button" class="button_screen buttons__proceed" type="submit" value="' . escape_html(do_lang('CONTINUE_RESTORATION')) . '" onclick="this.disabled=true; this.form.submit();" /></form>';
            $msg .= '<script>var button=document.getElementById(\'proceed_button\'); button.disabled=true; button.form.submit();</script>';
            finish_restorer_output($msg);
        }
    }

    // Keep building up
    $sql_buildup .= $line . "\n";

    // Offset
    $offset = ftell($data_file);
}

fclose($data_file);

// Run any remaining command
if ($sql_buildup != '') {
    $success = @eval($sql_buildup);
    if ($success === false) {
        header('Content-type: text/plain');
        exit('Failed on: ' . $sql_buildup);
    }
    $sql_buildup = '';
}


//{!!DB!!}


// Done
$msg = do_lang('BACKUP_RESTORE_SUCCESS');
finish_restorer_output($msg);

/**
 * Show some output
 *
 * @param  string $msg The message to show. Must be in HTML format.
 */
function finish_restorer_output($msg)
{
    require_code('tempcode_compiler');
    $css_nocache = _do_template('default', '/css/', 'no_cache', 'no_cache', 'EN', '.css');
    $tpl = do_template('RESTORE_HTML_WRAP', array('_GUID' => '8e3b9d894d8ef06b5057fb654f7db59b', 'CSS_NOCACHE' => $css_nocache, 'MESSAGE' => $msg));
    echo $tpl->evaluate();
    exit();
}

/**
 * This function is a very important one when coding. It allows you to include a source code file (from root/sources/ or root/sources_custom/) through the proper channels.
 * You should remember this function, and not substitute anything else for it, as that will likely make your code unstable.
 * It is key to source code modularity in Composr.
 *
 * @param  string $codename The codename for the source module to load
 */
function require_code($codename)
{
    global $FILE_ARRAY, $REQUIRED_BEFORE;
    if (array_key_exists($codename, $REQUIRED_BEFORE)) {
        return;
    }
    $REQUIRED_BEFORE[$codename] = 1;
    if (@is_array($FILE_ARRAY)) {
        $file = file_array_get('sources/' . $codename . '.php');
        $file = str_replace('<' . '?php', '', $file);
        $file = str_replace('?' . '>', '', $file);
        eval($file);
        @call_user_func('init__' . str_replace('/', '__', $codename));
    } else {
        global $FILE_BASE;

        $path = $FILE_BASE . ((strpos($codename, '.php') === false) ? ('/sources/' . $codename . '.php') : '/' . str_replace('_custom', '', $codename));
        if (!file_exists($path)) {
            $path = $FILE_BASE . ((strpos($codename, '.php') === false) ? ('/sources_custom/' . $codename . '.php') : '/' . str_replace('_custom', '', $codename));
        }
        require_once($path);
        @call_user_func('init__' . str_replace('/', '__', $codename));
    }
}

/**
 * Make an object of the given class
 *
 * @param  string $class The class name
 * @return object The object
 */
function object_factory($class)
{
    return new $class;
}

/**
 * Sets the value of a configuration option, if the PHP environment allows it.
 *
 * @param  string $var Config option.
 * @param  string $value New value of option.
 * @return ~string                      Old value of option (false: error).
 */
function safe_ini_set($var,$value)
{
    if (@preg_match('#(\s|,|^)ini_set(\s|$|,)#', strtolower(@ini_get('disable_functions') . ',' . ini_get('suhosin.executor.func.blacklist') . ',' . ini_get('suhosin.executor.include.blacklist') . ',' . ini_get('suhosin.executor.eval.blacklist'))) != 0) {
        return false;
    }

    return @ini_set($var, $value);
}

/**
 * Handle GET URLs requesting embedded media files.
 */
function handle_self_referencing_embedment()
{
    // If this is self-referring to CSS or logo
    if (array_key_exists('type', $_GET)) {
        $type = $_GET['type'];

        if ($type == 'logo') {
            header('Content-type: image/png');
            if (!file_exists(get_file_base() . '/themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png')) {
                $out = file_array_get('themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png');
            } else {
                $out = file_get_contents(get_file_base() . '/themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png');
            }

            echo $out;

            exit();
        }
        if ($type == 'css') {
            header('Content-Type: text/css');

            $output = '';

            $path = get_file_base() . '/themes/default/css/install.css';
            $file = file_get_contents($path);
            require_code('tempcode_compiler');
            $css = template_to_tempcode($file, 0, false, '');
            $output .= $css->evaluate();

            $path = get_file_base() . '/themes/default/css/global.css';
            $file = file_get_contents($path);
            require_code('tempcode_compiler');
            $css = template_to_tempcode($file, 0, false, '');
            $output .= $css->evaluate();

            echo $output;

            exit();
        }
    }
}
