<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.

*/

global $IN_MINIKERNEL_VERSION;
$IN_MINIKERNEL_VERSION = true;

// Find Composr base directory, and chdir into it
global $FILE_BASE, $RELATIVE_PATH;
$FILE_BASE = (strpos(__FILE__, './') === false) ? __FILE__ : realpath(__FILE__);
$FILE_BASE = dirname($FILE_BASE);
if (!is_file($FILE_BASE . '/sources/global.php')) {
    $RELATIVE_PATH = basename($FILE_BASE);
    $FILE_BASE = dirname($FILE_BASE);
} else {
    $RELATIVE_PATH = '';
}
@chdir($FILE_BASE);

error_reporting(E_ALL);

safe_ini_set('display_errors', '1');
assert_options(ASSERT_ACTIVE, 0);
safe_ini_set('assert.active', '0');

global $REQUIRED_BEFORE;
$REQUIRED_BEFORE = array();

global $SITE_INFO;
$SITE_INFO = array();

global $CURRENT_SHARE_USER;
$CURRENT_SHARE_USER = null;

$GLOBALS['DEV_MODE'] = false;
$GLOBALS['SEMI_DEV_MODE'] = true;

if (!defined('ENT_SUBSTITUTE')) { // LEGACY
    define('ENT_SUBSTITUTE', 0);
}

@ob_end_clean(); // Reset to have no output buffering by default (we'll use it internally, taking complete control)

$shl = @ini_get('suhosin.memory_limit');
if (($shl === false) || ($shl == '') || ($shl == '0')) {
    safe_ini_set('memory_limit', '-1');
} else {
    safe_ini_set('memory_limit', $shl);
}

// Requirements check
$phpv = PHP_VERSION;
if ((substr($phpv, 0, 2) == '3.') || (substr($phpv, 0, 2) == '4.') || (substr($phpv, 0, 4) == '5.0.')) {
    exit(do_lang('PHP_OLD'));
}

// Tunnel into some Composr code we can use
include('_config.php');
require_code('critical_errors');
require_code('permissions');
require_code('minikernel');
require_code('global3');
require_code('temporal');
require_code('caches');
require_code('files');
require_code('lang');
require_code('tempcode');
require_code('templates');
require_code('zones');
require_code('version');
require_code('comcode');
require_code('database');
require_code('database_action');

// If we are referencing this file in order to extract dependant url's from a pack
handle_self_referencing_embedment();

// Set up some globals
global $INSTALL_LANG, $VERSION, $CHMOD_ARRAY;
$INSTALL_LANG = (isset($_GET['default_lang'])) ? $_GET['default_lang'] : 'en';

// Languages we can use
require_lang('global');
require_lang('critical_error');
require_lang('installer');
require_lang('version');


{
    !!DB!!}


require_code('tempcode_compiler');
$css_nocache = _do_template('default', '/css/', 'no_cache', 'no_cache', 'EN', '.css');
$tpl = do_template('RESTORE_HTML_WRAP', array('_GUID' => 'ce3aebec8c995ea93ac7c1a095c66a51', 'CSS_NOCACHE' => $css_nocache, 'MESSAGE' => do_lang('SUCCESS')));
echo $tpl->evaluate();

/**
 * This function is a very important one when coding. It allows you to include a source code file (from root/sources/ or root/sources_custom/) through the proper channels.
 * You should remember this function, and not substitute anything else for it, as that will likely make your code unstable.
 * It is key to source code modularity in Composr.
 *
 * @param  string $code The codename for the source module to load
 */
function require_code($code)
{
    global $FILE_ARRAY, $REQUIRED_BEFORE;
    if (array_key_exists($code, $REQUIRED_BEFORE)) {
        return;
    }
    $REQUIRED_BEFORE[$code] = 1;
    if (@is_array($FILE_ARRAY)) {
        $file = file_array_get('sources/' . $code . '.php');
        $file = str_replace('<?php', '', $file);
        $file = str_replace('', '', $file);
        eval($file);
        @call_user_func('init__' . str_replace('/', '__', $code));
    } else {
        global $FILE_BASE;

        require_once($FILE_BASE . '/sources/' . $code . '.php');
        @call_user_func('init__' . str_replace('/', '__', $code));
    }
}

/**
 * Make an object of the given class
 *
 * @param  string $class The class name
 * @return object The object
 */
function object_factory($class)
{
    return new $class;
}

/**
 * Sets the value of a configuration option, if the PHP environment allows it.
 *
 * @param  string $var Config option.
 * @param  string $value New value of option.
 * @return ~string                      Old value of option (false: error).
 */
function safe_ini_set($var,$value)
{
    if (@preg_match('#(\s|,|^)ini_set(\s|$|,)#', strtolower(@ini_get('disable_functions') . ',' . ini_get('suhosin.executor.func.blacklist') . ',' . ini_get('suhosin.executor.include.blacklist') . ',' . ini_get('suhosin.executor.eval.blacklist'))) != 0) {
        return false;
    }

    return @ini_set($var, $value);
}

/**
 * Handle GET URLs requesting embedded media files.
 */
function handle_self_referencing_embedment()
{
    // If this is self-referring to CSS or logo
    if (array_key_exists('type', $_GET)) {
        $type = $_GET['type'];

        if ($type == 'logo') {
            header('Content-type: image/png');
            if (!file_exists(get_file_base() . '/themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png')) {
                $out = file_array_get('themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png');
            } else {
                $out = file_get_contents(get_file_base() . '/themes/default/images/' . get_site_default_lang() . '/logo/standalone-logo.png');
            }

            echo $out;

            exit();
        }
        if ($type == 'css') {
            header('Content-Type: text/css');
            if (!file_exists(get_file_base() . '/themes/css/global.css')) {
                $file = file_array_get('themes/default/css/global.css');
                echo $file;
            } else {
                require_once(get_file_base() . '/themes/default/css/global.css');
            }

            exit();
        }
    }
}
